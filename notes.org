#+TITLE: Modern C
#+PROPERTY: :header-args :C :session *C* :exports results


*Format Specifiers*
String literal, begin with ~%~ serves as a format for the output
-  'd' Decimal |
- 'i' Decimal, Octal or signed type
- 'u' Decimal
- 'o' Octal
- 'x' Hexadecimal
- 'aefg' Flosting point
- '%' '%' character
- 'c' Characters
- 's' Non-whitespace "\f\n\r\t\v"
- '[' Scan set
- 'p' Address
- 'n' Character count

#+BEGIN_SRC C
#include <stdlib.h>
#include <stdio.h>

/*  the main thing this porogram does */
int main(void) {
   //Declaration
    double A[5] = {
    [0] = 9.0,
    [1] = 2.9,
    [4] = 3.E+25,
    [3] = .00007,
};
 //doing some work
    for (size_t i = 0; i < 5; ++i) {
        printf("element %zu is %g, \tits square is %g\n",
               i,
               A[i],
               A[i]*A[i]) ;
}
    return EXIT_SUCCESS;
};
#+END_SRC

#+RESULTS:
| element 0 is 9,     | its square is 81      |
| element 1 is 2.9,   | its square is 8.41    |
| element 2 is 0,     | its square is 0       |
| element 3 is 7e-05, | its square is 4.9e-09 |
| element 4 is 3e+25, | its square is 9e+50   |



2 categories of aspects to consider in a c program:
1. Syntactical aspects - how do we specify the program so the compiler understands it
2. Semantic aspects - what do we specify so that the program does what we want


*literals, identifiers, functions, operators*

- Literals
  0, 1,3 etc are literals, refer to fixed values
- Identifiers
  "names" given to entities within the program. these nat refer to ~data objects~ ~types~ ~functions~ ~constants~. In getting_started.c ~main, A, i, printf, size_t~ are identifiers.
 - Functions ~main, printf~

*Control*

/Conditional Execution/

The ~if~ keyword

#+BEGIN_SRC C
if (i > 25) { //controlling expression
    j = i -25; //dependent block
}
#+END_SRC
